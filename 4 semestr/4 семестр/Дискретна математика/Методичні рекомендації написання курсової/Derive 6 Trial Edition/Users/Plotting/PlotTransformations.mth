"PlotTransformations.mth - a MTH Utility File for General-Purpose Plotting an~
d Transforming of Derive objects. Peter Schofield, Trinity and All Saints Col~
lege, University of Leeds  (Updated for Derive 6, June 2003) email: p_schofie~
ld@tasc.ac.uk"

"Consult - PlotTransformations.dfw - for explanations of the user-defined fun~
ctions and instructions in this file."

"Settings (Rectangular Coordinates) - 2D-plot Window:  Approximate Before Plo~
tting (ON); Options>Display>Points>Connect(Yes),Small. 3D-plot Window:  Appro~
ximate Before Plotting (ON)."

"General-Purpose Transformers"

TRAN_R(v,a,x,y,z):=IF(VECTOR?(v),IF(VECTOR?(v SUB 1),MAP_LIST(TRAN_R(u,a,x,y,~
z),u,v),IF(LOGICAL_TYPE?(v SUB 1),MAP_LIST(TRAN_R(u,a,x,y,z),u,v),v*a),v*a),I~
F(DET(a)=0,IF(DIM(a)=2,[inf,inf],[inf,inf,inf]),IF(DIM(a)=2,SUBST(v,[x,y],[x,~
y]*a^(-1)),SOLVE(SUBST(v,[x,y,z],[x,y,z]*a^(-1)),z))))

TRAN(v,a,x,y,z):=TRAN_R(v,a`,x,y,z)

DIS(v,d,x,y,z):=IF(VECTOR?(v),IF(VECTOR?(v SUB 1),MAP_LIST(DIS(u,d,x,y,z),u,v~
),IF(LOGICAL_TYPE?(v SUB 1),MAP_LIST(DIS(u,d,x,y,z),u,v),IF(VECTOR?(d SUB 1),~
v+d` SUB 1,v+d)),IF(VECTOR?(d SUB 1),v+d` SUB 1,v+d)),IF(VECTOR?(d SUB 1),IF(~
DIM(d)=2,SUBST(v,[x,y],[x,y]-d` SUB 1),SOLVE(SUBST(v,[x,y,z],[x,y,z]-d` SUB 1~
),z)),IF(DIM(d)=2,SUBST(v,[x,y],[x,y]-d),SOLVE(SUBST(v,[x,y,z],[x,y,z]-d),z))~
))

"Special Types"

STR(v,s,x,y,z):=IF(VECTOR?(s SUB 1),IF(DIM(s)=2,TRAN_R(v,[[s SUB 1 SUB 1,0],[~
0,s SUB 2 SUB 1]],x,y,z),TRAN_R(v,[[s SUB 1 SUB 1,0,0],[0,s SUB 2 SUB 1,0],[0~
,0,s SUB 3 SUB 1]],x,y,z)),IF(DIM(s)=2,TRAN_R(v,[[s SUB 1,0],[0,s SUB 2]],x,y~
,z),TRAN_R(v,[[s SUB 1,0,0],[0,s SUB 2,0],[0,0,s SUB 3]],x,y,z)))

PROJ(v,k,x,y,z):=IF(VECTOR?(v),IF(VECTOR?(v SUB 1),MAP_LIST(PROJ(u,k,x,y,z),u~
,v),IF(LOGICAL_TYPE?(v SUB 1),MAP_LIST(PROJ(u,k,x,y,z),u,v),v . k),v . k),IF(~
MEMBER?(z,VARIABLES(v)),SOLVE(SUBST(v,[x,y,z],[x/k,y/k,z/k]),z),SUBST(v,[x,y]~
,[x/k,y/k])))

[INV(v,x,y,z):=PROJ(v,-1,x,y,z),ENLA(v,k,x,y,z):=PROJ(v,k,x,y,z)]

ORTHO_(n):=IF(n SUB 1=n SUB 2=0,[[1,0,0],[0,SIGN(n SUB 3),0],[0,0,1]],[SIGN(C~
ROSS([n SUB 2,-n SUB 1,0],n)),SIGN([n SUB 2,-n SUB 1,0]),SIGN(n)])

ROT(v,03b1,03b2,x,y,z):=IF(VECTOR?(03b1),IF(VECTOR?(03b1 SUB 1),TRAN_R(v,~
ORTHO_(03b1` SUB 1)^(-1)*[[COS(03b2),-SIN(03b2),0],[SIN(03b2),COS(03b2),~
0],[0,0,1]]*ORTHO_(03b1` SUB 1),x,y,z),TRAN_R(v,ORTHO_(03b1)^(-1)*[[COS(03~
b2),-SIN(03b2),0],[SIN(03b2),COS(03b2),0],[0,0,1]]*ORTHO_(03b1),x,y,z)),T~
RAN_R(v,[[COS(03b1),SIN(03b1)],[-SIN(03b1),COS(03b1)]],x,y,z))

PROT(v,03b1,03b2,x,y,z):=ROT(v,03b1,-03b2,x,y,z)

REF(v,03b1,x,y,z):=IF(VECTOR?(03b1),IF(VECTOR?(03b1 SUB 1),TRAN_R(v,ORTHO_~
(03b1)` SUB 1^(-1)*[[1,0,0],[0,1,0],[0,0,-1]]*ORTHO_(03b1)` SUB 1,x,y,z),TR~
AN_R(v,ORTHO_(03b1)^(-1)*[[1,0,0],[0,1,0],[0,0,-1]]*ORTHO_(03b1),x,y,z)),TR~
AN_R(v,[[COS(2*03b1),SIN(2*03b1)],[SIN(2*03b1),-COS(2*03b1)]],x,y,z))

SHEAR(u,k,x,y,z):=IF(VECTOR?(k SUB 1),IF(DIM(k)=3,TRAN_R(u,[[1,k SUB 2 SUB 1,~
0],[k SUB 1 SUB 1,1,0],[k SUB 3 SUB 1,0,1]],x,y,z),TRAN_R(u,[[1,k SUB 2 SUB 1~
],[k SUB 1 SUB 1,1]],x,y,z)),IF(DIM(k)=3,TRAN_R(u,[[1,k SUB 2,0],[k SUB 1,1,0~
],[k SUB 3,0,1]],x,y,z),TRAN_R(u,[[1,k SUB 2],[k SUB 1,1]],x,y,z)))

"Append-and-Plot Transformers"

ATRAN_R v:=VECTOR(IF(i=1,v SUB 1,TRAN_R(v SUB 1,v SUB i)),i,DIM(v))

ATRAN v:=VECTOR(IF(i=1,v SUB 1,TRAN(v SUB 1,v SUB i)),i,DIM(v))

[[APROJ v:=VECTOR(IF(i=1,v SUB 1,PROJ(v SUB 1,v SUB i)),i,DIM(v))],[AENLA v:=~
VECTOR(IF(i=1,v SUB 1,PROJ(v SUB 1,v SUB i)),i,DIM(v))]]

ASTR v:=VECTOR(IF(i=1,v SUB 1,STR(v SUB 1,v SUB i)),i,DIM(v))

AINV v:=[v,INV(v)]

AREF v:=VECTOR(IF(i=1,v SUB 1,REF(v SUB 1,v SUB i)),i,DIM(v))

AROT v:=IF(VECTOR?(v SUB 2),ADJOIN(v SUB 1,MAP_LIST(ROT(v SUB 1,v SUB 2,m),m,~
VECTOR(v SUB i,i,3,DIM(v)))),VECTOR(IF(i=1,v SUB 1,ROT(v SUB 1,v SUB i)),i,DI~
M(v)))

APROT v:=IF(VECTOR?(v SUB 2),ADJOIN(v SUB 1,MAP_LIST(PROT(v SUB 1,v SUB 2,m),~
m,VECTOR(v SUB i,i,3,DIM(v)))),VECTOR(IF(i=1,v SUB 1,PROT(v SUB 1,v SUB i)),i~
,DIM(v)))

ADIS v:=ADJOIN(v SUB 1,MAP_LIST(DIS(v SUB 1,m),m,VECTOR(v SUB i,i,2,DIM(v))))

ADIS v:=VECTOR(IF(i=1,v SUB 1,DIS(v SUB 1,v SUB i)),i,DIM(v))

ASHEAR v:=VECTOR(IF(i=1,v SUB 1,SHEAR(v SUB 1,v SUB i)),i,DIM(v))

"Selecting Parameter Limits"

PARA(u,a:=false,b:=true):=IF(VECTOR?(u SUB 1),IF(a=false,MAP_LIST(PARA(v SUB ~
1,v SUB 2,v SUB 3),v,u),MAP_LIST(PARA(v,a,b),v,u)),IF(VECTOR?(a) AND VECTOR?(~
b),SUBST(u,VARIABLES(u),[((VARIABLES(u)) SUB 1*(a SUB 2-a SUB 1)+[0,pi,5] SUB~
 DIM(u)*(a SUB 2+a SUB 1))/[0,2*pi,10] SUB DIM(u),((VARIABLES(u)) SUB 2*(b SU~
B 2-b SUB 1)+[0,pi,5] SUB DIM(u)*(b SUB 2+b SUB 1))/[0,2*pi,10] SUB DIM(u)]),~
IF(VECTOR?(a),SUBST(u,VARIABLES(u),[((VARIABLES(u)) SUB 1*(a SUB 2-a SUB 1)+[~
0,pi,5] SUB DIM(u)*(a SUB 2+a SUB 1))/[0,2*pi,10] SUB DIM(u)]),SUBST(u,VARIAB~
LES(u),[((VARIABLES(u)) SUB 1*(b-a)+[0,pi,5] SUB DIM(u)*(b+a))/[0,2*pi,10] SU~
B DIM(u)]))))

"Basic Bodyscans"

"(The current version of ORPLOT was suggested by Albert D Rich.)"

ORPLOT(v):=SUM(IF(v SUB i,1,0),i,1,DIM(v))>0

FILL__2(p,q):=(p SUB 1-q SUB 1)*(y-q SUB 3)/(p SUB 3-q SUB 3)+q SUB 1<=x<=(y-~
q SUB 3)*(p SUB 2-q SUB 2)/(p SUB 3-q SUB 3)+q SUB 2 AND IF(p SUB 3<=q SUB 3,~
p SUB 3<=y<=q SUB 3,q SUB 3<=y<=p SUB 3)

[[XXYSCAN(v):=IF(VECTOR?(v SUB 1 SUB 1),MAP_LIST(XXYSCAN(z),z,v),VECTOR(FILL_~
_2(v SUB i,v SUB (i+1)),i,DIM(v)-1))],[ZSCAN(u,v):=MAP_LIST(MAP_LIST([y SUB 1~
*x SUB 1,y SUB 1*x SUB 2,y SUB 2],x,u),y,v)]]

BSCAN__(n,v):=ZSCAN(VECTOR([COS(2*pi*03b8/n),SIN(2*pi*03b8/n)],03b8,0,n),v~
)

"A Geometry Set of Unit 2D and 3D Laminas"

UNIT_RPOLY2(n):=[ORPLOT(XXYSCAN(VECTOR([-COS((2*k+1)*pi/n-pi/2),COS((2*k+1)*p~
i/n-pi/2),SIN((2*k+1)*pi/n-pi/2)],k,0,(n-1)/2))),VECTOR([COS((2*k+1)*pi/n-pi/~
2),SIN((2*k+1)*pi/n-pi/2)],k,0,n)]

UNIT_RPOLY3(n):=BSCAN__(n,[[0,0],[1,0]])

[[UNIT_CIRCLE2:=[x^2+y^2<1,x^2+y^2=1]],[UNIT_CIRCLE3:=UNIT_RPOLY3(20)]]

[[UNIT_SQUARE2:=[0<x<1 AND 0<y<1,[[0,0],[1,0],[1,1],[0,1],[0,0]]]],[UNIT_SQUA~
RE3:=[[[0,0,0],[1,0,0]],[[0,1,0],[1,1,0]]]]]

[[UNIT_TRIANGLE2:=[x<1-y AND 0<x<1 AND 0<y<1,[[0,0],[1,0],[0,1],[0,0]]]],[UNI~
T_TRIANGLE3:=[[[0,1,0],[0,1,0]],[[0,0,0],[1,0,0]]]]]

"A Geometry Set of Unit 3D-Objects"

UNIT_CUBE:=[[[[0,0,1],[1,0,1],[1,1,1],[0,1,1],[0,0,1]],[[0,0,0],[1,0,0],[1,1,~
0],[0,1,0],[0,0,0]]],[[[0,0,0],[1,0,0]],[[0,1,0],[1,1,0]]],[[[0,0,1],[0,1,1]]~
,[[1,0,1],[1,1,1]]]]

UNIT_PYRAMID:=[[[[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1]],[[0,0,0],[1,0,0],[1~
,1,0],[0,1,0],[0,0,0]]],[[[0,0,0],[1,0,0]],[[0,1,0],[1,1,0]]]]

UNIT_TETRAHEDRON:=[[[0,0,1],[0,0,1],[0,0,1],[0,0,1]],[[0,0,0],[1,0,0],[0,1,0]~
,[0,0,0]],[[0,0,0],[0,0,0],[0,0,0],[0,0,0]]]

UNIT_PRISM:=[[[[0,0,0],[1,0,0],[0,1,0],[0,0,0]],[[0,0,1],[1,0,1],[0,1,1],[0,0~
,1]]],[[[[0,1,0],[0,1,0]],[[0,0,0],[1,0,0]]],[[[0,0,1],[1,0,1]],[[0,1,1],[0,1~
,1]]]]]

UNIT_SPHERE:=[COS(pi*03c6___/10)*COS(pi*03b8___/5),COS(pi*03c6___/10)*SIN(~
pi*03b8___/5),SIN(pi*03c6___/10)]

UNIT_HEMISPHERE:=BSCAN__(20,APPEND(VECTOR([SIN(03c6),COS(03c6)],03c6,0,pi/~
2,pi/20),[[0,0]]))

UNIT_CYLINDER:=BSCAN__(20,[[0,1],[1,1],[1,0],[0,0]])

UNIT_CONE:=BSCAN__(20,[[0,1],[1,0],[0,0]])

UNIT_DCONE:=BSCAN__(20,[[0,1],[1,0],[0,-1]])

"More Laminas and 3D-Objects"

STR_AND_DIS(v,s,c):=IF(DIM(s)=2,IF(DIM(c)=2,DIS(STR(v SUB 1,s),c),DIS(STR(v S~
UB 2,[s SUB 1,s SUB 2,1]),c)),DIS(STR(v,s),c))

TRANS_UNIT_VECTORS2(v,a):=IF(DIM(a SUB 1)=2,DIS(TRAN_R(v SUB 1,[a SUB 2-a SUB~
 1,a SUB 3-a SUB 1]),a SUB 1),DIS(TRAN_R(v SUB 2,[a SUB 2-a SUB 1,a SUB 3-a S~
UB 1,CROSS(a SUB 2-a SUB 1,a SUB 3-a SUB 1)]),a SUB 1))

TRANS_UNIT_VECTORS3(v,a):=DIS(TRAN_R(v,[a SUB 2-a SUB 1,a SUB 3-a SUB 1,a SUB~
 4-a SUB 1]),a SUB 1)

SRPOLY(n,s,c):=STR_AND_DIS([UNIT_RPOLY2(n),UNIT_RPOLY3(n)],s,c)

RPOLY(n,r,c):=SRPOLY(n,[r,r],c)

ELLIPSE(s,c):=STR_AND_DIS([UNIT_CIRCLE2,UNIT_CIRCLE3],s,c)

CIRCLE(r,c):=ELLIPSE([r,r],c)

RECTANGLE(s,p):=STR_AND_DIS([UNIT_SQUARE2,UNIT_SQUARE3],s,p)

SQUARE(r,p):=RECTANGLE([r,r],p)

PARALLELOGRAM(a):=TRANS_UNIT_VECTORS2([UNIT_SQUARE2,UNIT_SQUARE3],a)

TRIANGLE(a):=TRANS_UNIT_VECTORS2([UNIT_TRIANGLE2,UNIT_TRIANGLE3],a)

CUBOID(s,p):=STR_AND_DIS(UNIT_CUBE,s,p)

CUBE(r,p):=CUBOID([r,r,r],p)

PARALLELEPIPED(a):=TRANS_UNIT_VECTORS3(UNIT_CUBE,a)

TETRAHEDRON(a):=TRANS_UNIT_VECTORS3(UNIT_TETRAHEDRON,a)

PYRAMID(a):=TRANS_UNIT_VECTORS3(UNIT_PYRAMID,a)

PRISM(a):=TRANS_UNIT_VECTORS3(UNIT_PRISM,a)

SPHEROID(s,c):=STR_AND_DIS(UNIT_SPHERE,s,c)

SPHERE_(r,c):=SPHEROID([r,r,r],c)

HEMISPHEROID(s,c):=STR_AND_DIS(UNIT_HEMISPHERE,s,c)

HEMISPHERE(r,c):=HEMISPHEROID([r,r,r],c)

SCYLINDER(s,c):=STR_AND_DIS(UNIT_CYLINDER,s,c)

CYLINDER_(r,c):=SCYLINDER([r,r,r],c)

SCONE(s,c):=STR_AND_DIS(UNIT_CONE,s,c)

CONE_(r,c):=SCONE([r,r,r],c)

SDCONE(s,c):=STR_AND_DIS(UNIT_DCONE,s,c)

DCONE(r,c):=SDCONE([r,r,r],c)

"'TESTSET' Examples Containing Selections of 2D and 3D Objects to Plot."

"2D-TESTSET"

TESTSET2D:=[UNIT_SQUARE2,RECTANGLE([2,1],[1,-2]),PARALLELOGRAM([[0,0],[-2,-1]~
,[0,-2]]),TRIANGLE([[-3,2],[3,2],[1,3]]),UNIT_CIRCLE2,RPOLY(6,1,[-3,3]),ELLIP~
SE([2,1],[[2],[3]])]

"3D-TESTSETS"

TESTSET13D:=[UNIT_SQUARE3,RECTANGLE([[4],[1.5]],[[1],[-2],[3]]),PARALLELOGRAM~
([[0,0,0],[2,-2,-2],[3,2,-2]]),TRIANGLE([[-3,2,1],[-4,2,5],[1,-3,4]]),RPOLY(9~
,1,[0,0,2]),ELLIPSE([2,4],[-2,0,-5])]

TESTSET23D:=[UNIT_CUBE,CUBOID([4,1.5,1],[[1],[-2],[3]]),PARALLELEPIPED([[0,0,~
-1],[-2,-1,-2],[1,3,1],[3,-2,-4]]),TETRAHEDRON([[-3,2,1],[-4,2,5],[1,0,4],[5,~
5,5]]),PYRAMID([[0,0,-5],[0,5,-5],[-5,0,-5],[-2.5,2.5,-2.5]]),PRISM([[0,-2,-1~
],[0,-3,-1],[0,-3,1],[2,-3,-1]])]

TESTSET33D:=[UNIT_HEMISPHERE,SPHERE_(2,[-3,3,3]),CYLINDER_(2,[[3],[3],[-4]]),~
SCONE([[2],[1],[4]],[2,-4,0]),DCONE(2,[-3,-3,-1])]

"Examples of Applying Some General-Purpose Transformers to the TESTSETS."

"2D-plot:"

ROT(TESTSET2D,pi/2)

REF(TESTSET2D,pi/4)

AINV(TESTSET2D)

"3D-plot:"

AINV(TESTSET13D)

ADIS(0.4*TESTSET23D,[-2.5,-2.5,-2.5],[[2.5],[2.5],[2.5]])

AREF(TESTSET33D,[0,0,1])

